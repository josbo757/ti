diff -urN config.h sensor_new/config.h
--- config.h	2017-09-11 10:25:17.965000000 -0500
+++ sensor_new/config.h	2017-07-10 10:18:56.611366100 -0500
@@ -45,10 +45,11 @@
  *****************************************************************************/
 #ifndef CONFIG_H
 #define CONFIG_H
-
 /******************************************************************************
  Includes
  *****************************************************************************/
+#include <api_mac.h>
+#include <features.h>
 
 #ifdef __cplusplus
 extern "C"
@@ -98,7 +99,7 @@
 #define CONFIG_ORPHAN_BACKOFF_INTERVAL 300000
 
 /*! Setting for Phy ID */
-#define CONFIG_PHY_ID                (APIMAC_STD_US_915_PHY_1)
+#define CONFIG_PHY_ID                (APIMAC_GENERIC_US_LRM_915_PHY_129)
 
 #if ((CONFIG_PHY_ID >= APIMAC_MRFSK_STD_PHY_ID_BEGIN) && (CONFIG_PHY_ID <= APIMAC_MRFSK_STD_PHY_ID_END))
 /*! Setting for channel page */
@@ -135,6 +136,8 @@
 */
 #define CONFIG_RANGE_EXT_MODE       APIMAC_NO_EXTENDER
 
+//#define CONFIG_RANGE_EXT_MODE   APIMAC_HIGH_GAIN_MODE
+
 /*! Setting Default Key*/
 #define KEY_TABLE_DEFAULT_KEY {0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0,\
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
@@ -220,13 +223,13 @@
 #define CONFIG_REPORTING_INTERVAL  180000
 #else
 /*! Polling interval in milliseconds */
-#define CONFIG_POLLING_INTERVAL      60000
+#define CONFIG_POLLING_INTERVAL      6000
 /*! PAN Advertisement Solicit trickle timer duration in milliseconds */
-#define CONFIG_PAN_ADVERT_SOLICIT_CLK_DURATION    60000
+#define CONFIG_PAN_ADVERT_SOLICIT_CLK_DURATION    6000
 /*! PAN Config Solicit trickle timer duration in milliseconds */
-#define CONFIG_PAN_CONFIG_SOLICIT_CLK_DURATION    60000
+#define CONFIG_PAN_CONFIG_SOLICIT_CLK_DURATION    6000
 /*! Default Reporting Interval - in milliseconds */
-#define CONFIG_REPORTING_INTERVAL  600000
+#define CONFIG_REPORTING_INTERVAL  1000
 #endif
 
 /*! FH Poll/Sensor msg start time randomization window */
@@ -248,6 +251,7 @@
  lowering this value will help reduce saturation */
 /* For China band, allowed values are between 6dBm and 14dBm */
 /* For CC1190, allowed values are between 18dBm and 27dBm */
+
 #if CONFIG_RANGE_EXT_MODE
 #define CONFIG_TRANSMIT_POWER        27
 #else
diff -urN gps_sensor.c sensor_new/gps_sensor.c
--- gps_sensor.c	1969-12-31 18:00:00.000000000 -0600
+++ sensor_new/gps_sensor.c	2017-06-27 12:32:26.495091500 -0500
@@ -0,0 +1,344 @@
+/******************************************************************************
+
+ @file gps_sensor.c
+
+ @brief TIMAC 2.0 GPS Sensor
+
+ Group: WCS LPC
+ Target Device: CC13xx
+
+ ******************************************************************************
+
+ Copyright (c) 2016, Texas Instruments Incorporated
+ All rights reserved.
+
+ Redistribution and use in source and binary forms, with or without
+ modification, are permitted provided that the following conditions
+ are met:
+
+ *  Redistributions of source code must retain the above copyright
+    notice, this list of conditions and the following disclaimer.
+
+ *  Redistributions in binary form must reproduce the above copyright
+    notice, this list of conditions and the following disclaimer in the
+    documentation and/or other materials provided with the distribution.
+
+ *  Neither the name of Texas Instruments Incorporated nor the names of
+    its contributors may be used to endorse or promote products derived
+    from this software without specific prior written permission.
+
+ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+ ******************************************************************************
+ Release Name: simplelink_cc13x0_sdk_1_00_00_13"
+ Release Date: 2016-11-21 18:05:40
+ *****************************************************************************/
+
+/******************************************************************************
+ Includes
+ *****************************************************************************/
+#include <gps_sensor.h>
+#include <stdlib.h>
+#include <stdint.h>
+#include "util.h"
+#include "api_mac.h"
+#include "jdllc.h"
+#include "ssf.h"
+#include "smsgs.h"
+#include "sensor.h"
+#include "config.h"
+#include "board.h"
+#include "board_led.h"
+#include <xdc/std.h>
+#include <ti/sysbios/BIOS.h>
+#include <ti/sysbios/knl/Clock.h>
+#include <ti/sysbios/knl/Task.h>
+#include <ti/sysbios/knl/Semaphore.h>
+#include <ti/drivers/UART.h>
+#include <ti/drivers/uart/UARTCC26XX.h>
+
+/******************************************************************************
+ Constants and definitions
+ *****************************************************************************/
+
+//#define DEBUG_TEST
+
+#define GPS_TASK_STACK_SIZE     1024
+#define GPS_TASK_PRIORITY       2
+
+#define GPS_PUSH_TO_FIX         IOID_11
+#define GPS_NRESET              IOID_5
+
+Task_Struct gpsTask;
+Char gpsTaskStack[GPS_TASK_STACK_SIZE];
+
+Semaphore_Handle gpsSemHandle;
+Semaphore_Struct gpsSemStruct;
+
+UART_Handle gpsUartHandle;
+UART_Params gpsUartParams;
+
+uint8_t currentInterval = 0;
+
+Smsgs_gpsSensorField_t latestGpsData;
+
+static PIN_Handle pinHandle;
+static PIN_State pinState;
+
+PIN_Config pinTable[] = {
+    GPS_PUSH_TO_FIX | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL | PIN_DRVSTR_MAX,
+    GPS_NRESET | PIN_GPIO_OUTPUT_EN | PIN_GPIO_HIGH | PIN_PUSHPULL | PIN_DRVSTR_MAX,
+    PIN_TERMINATE
+};
+
+void gpsTaskInit(void)
+{
+    /* Construct Semaphore */
+    Semaphore_Params semParams;
+    Semaphore_Params_init(&semParams);
+    Semaphore_construct(&gpsSemStruct, 0, &semParams);
+    gpsSemHandle = Semaphore_handle(&gpsSemStruct);
+
+    /* Configure display task. */
+    Task_Params taskParams;
+    Task_Params_init(&taskParams);
+    taskParams.stack = gpsTaskStack;
+    taskParams.stackSize = GPS_TASK_STACK_SIZE;
+    taskParams.priority = GPS_TASK_PRIORITY;
+    Task_construct(&gpsTask, gpsTaskFxn, &taskParams, NULL);
+
+    UART_init();
+
+    /* Create a UART with data processing off. */
+    UART_Params_init(&gpsUartParams);
+    gpsUartParams.writeDataMode = UART_DATA_BINARY;
+    gpsUartParams.readDataMode = UART_DATA_BINARY;
+    gpsUartParams.readReturnMode = UART_RETURN_FULL;
+    gpsUartParams.readEcho = UART_ECHO_OFF;
+    gpsUartParams.baudRate = 9600;
+    gpsUartParams.readTimeout = 500000 / Clock_tickPeriod;
+
+    gpsUartHandle = UART_open(Board_UART0, &gpsUartParams);
+
+    if (gpsUartHandle == NULL) {
+        /* UART_open() failed */
+        while (1);
+    }
+
+    pinHandle = PIN_open(&pinState, pinTable);
+
+}
+/*!
+ * @brief       Main task function
+ *
+ * @param       a0 -
+ * @param       a1 -
+ */
+#define EMPTY_TEST
+
+Void gpsTaskFxn(UArg a0, UArg a1)
+{
+
+    UART_control(gpsUartHandle, UARTCC26XX_CMD_RX_FIFO_FLUSH, 0);
+
+#ifdef GPS_SENSOR
+    while(1)
+    {
+        Semaphore_pend(gpsSemHandle, BIOS_WAIT_FOREVER);
+
+        /* Get GPS value */
+        uint8_t status = readGPS(&gpsSensor);
+
+        if(status == GPS_STATUS_ERROR)
+        {
+            gpsSensor.time.h = 0xFF;
+        }
+
+        Util_setEvent(&Sensor_events, SENSOR_GPS_EVT);
+
+    }
+#endif
+}
+
+uint8_t readGPS(Smsgs_gpsSensorField_t* gpsData)
+{
+    gpsDataUART_t uartData;
+
+    char input;
+    uint8_t gpsStatus = 0;
+
+    uint8_t i = 0;
+    uint8_t data = 0;
+    uint8_t count = 0;
+    char *ptr = uartData.time.h;
+
+    while(!gpsStatus)
+    {
+        while(input != '$')
+        {
+            UART_read(gpsUartHandle, &input, 1);
+        }
+
+        while(count < 6)
+        {
+            UART_read(gpsUartHandle, &input, 1);
+
+            switch(input)
+            {
+                case 'G':
+                    if(count == 0 || count == 2 || count == 3)
+                        count++;
+                    else
+                        count = 0;
+                    break;
+                case 'P':
+                    if(count == 1)
+                        count++;
+                    else
+                        count = 0;
+                    break;
+                case 'A':
+                    if(count == 4)
+                        count++;
+                    else
+                        count = 0;
+                    break;
+                case ',':
+                    if(count == 5)
+                        count++;
+                    else
+                        count = 0;
+                    break;
+                default:
+                        count = 0;
+                    break;
+            }
+        }
+
+        UART_read(gpsUartHandle, &input, 1);
+
+        i = 0;
+
+        if(input != ',')    // if data is valid
+        {
+            while(data < 9)
+            {
+                if(input != ',')
+                {
+                    switch (data)
+                    {
+                        case 0:
+                            if(i == 2)
+                                ptr = uartData.time.m;
+                            if(i == 4)
+                                ptr = uartData.time.s;
+                            if(input != '.')
+                            {
+                                *ptr = input;
+                                ptr++;
+                            }
+                            else
+                            {
+                                UART_read(gpsUartHandle, &input, 1);
+                                UART_read(gpsUartHandle, &input, 1);
+                                ptr = uartData.lat.DM;
+                            }
+                            break;
+                        case 1:
+                            if(input != '.')
+                            {
+                                *ptr = input;
+                                ptr++;
+                            }
+                            else
+                                ptr = uartData.lat.m;
+                            break;
+                        case 2:
+                            uartData.lat.dir = input;
+                            ptr = uartData.lng.DM;
+                            break;
+                        case 3:
+                            if(input != '.')
+                            {
+                                *ptr = input;
+                                ptr++;
+                            }
+                            else
+                                ptr = uartData.lng.m;
+                            break;
+                        case 4:
+                            uartData.lng.dir = input;
+                            ptr = uartData.alt.A;
+                            break;
+                        case 8:
+                            if(input != '.')
+                            {
+                                *ptr = input;
+                                ptr++;
+                            }
+                            else
+                                ptr = uartData.alt.a;
+                            break;
+                        default:
+                            break;
+                    }
+                    i++;
+                }
+                else
+                {
+                    i = 0;
+                    data++;
+                }
+
+                UART_read(gpsUartHandle, &input, 1);
+            }
+
+            // Parse GPS Data
+            uint16_t temp = atoi(uartData.lat.DM);
+            if(uartData.lat.dir == 'S')
+                gpsData->lat.DM = (uint8_t)temp*(-1);
+            else
+                gpsData->lat.DM = temp;
+
+            gpsData->lat.m = atol(uartData.lat.m);
+
+            temp = atoi(uartData.lng.DM);
+            if(uartData.lng.dir == 'W')
+                gpsData->lng.DM = temp*(-1);
+            else
+                gpsData->lng.DM = temp;
+
+            gpsData->lng.m = atol(uartData.lng.m);
+
+            gpsData->alt.A = atoi(uartData.alt.A);
+            gpsData->alt.a = atoi(uartData.alt.a);
+
+            gpsData->time.h = atoi(uartData.time.h);
+            gpsData->time.m = atoi(uartData.time.m);
+            gpsData->time.s = atoi(uartData.time.s);
+
+            gpsStatus = GPS_STATUS_SUCCESS;
+        }
+        else
+            gpsStatus = GPS_STATUS_ERROR;
+    }
+
+    UART_control(gpsUartHandle, UARTCC26XX_CMD_RX_FIFO_FLUSH, 0);
+
+    return gpsStatus;
+}
+
+void gpsReport(void)
+{
+    Semaphore_post(gpsSemHandle);
+}
diff -urN gps_sensor.h sensor_new/gps_sensor.h
--- gps_sensor.h	1969-12-31 18:00:00.000000000 -0600
+++ sensor_new/gps_sensor.h	2017-06-27 12:32:26.495091500 -0500
@@ -0,0 +1,91 @@
+/******************************************************************************
+
+ @file gps.h
+
+ @brief TIMAC 2.0 GPS Sensor Header
+
+ Group: WCS LPC
+ Target Device: CC13xx
+
+ ******************************************************************************
+
+ Copyright (c) 2016, Texas Instruments Incorporated
+ All rights reserved.
+
+ Redistribution and use in source and binary forms, with or without
+ modification, are permitted provided that the following conditions
+ are met:
+
+ *  Redistributions of source code must retain the above copyright
+    notice, this list of conditions and the following disclaimer.
+
+ *  Redistributions in binary form must reproduce the above copyright
+    notice, this list of conditions and the following disclaimer in the
+    documentation and/or other materials provided with the distribution.
+
+ *  Neither the name of Texas Instruments Incorporated nor the names of
+    its contributors may be used to endorse or promote products derived
+    from this software without specific prior written permission.
+
+ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+ ******************************************************************************
+ Release Name: simplelink_cc13x0_sdk_1_00_00_13"
+ Release Date: 2016-11-21 18:05:40
+ *****************************************************************************/
+
+#ifndef APP_LOCAL_SENSOR_DISPLAY_H_
+#define APP_LOCAL_SENSOR_DISPLAY_H_
+
+#include "sensor.h"
+#include <xdc/std.h>
+
+typedef struct gpsDataUART_s {
+    struct ulat_s {
+        char DM[8];
+        char m[10];
+        char dir;
+    } lat;
+
+    struct ulng_s {
+        char DM[8];
+        char m[10];
+        char dir;
+    } lng;
+
+    struct ualt_s
+    {
+        char A[8];
+        char a[4];
+    } alt;
+
+    struct utime_s {
+        char h[4];
+        char m[4];
+        char s[4];
+    } time;
+} gpsDataUART_t;
+
+#define GPS_STATUS_SUCCESS      1
+#define GPS_STATUS_ERROR        2
+
+extern Smsgs_gpsSensorField_t gpsSensor;
+extern Smsgs_gpsSensorField_t gpsSensorTest;
+extern uint16_t Sensor_events;
+
+void gpsTaskInit(void);
+Void gpsTaskFxn(UArg a0, UArg a1);
+uint8_t readGPS(Smsgs_gpsSensorField_t* gpsData);
+void gpsReport(void);
+
+#endif /* APP_LOCAL_SENSOR_DISPLAY_H_ */
diff -urN main.c sensor_new/main.c
--- main.c	2017-09-11 10:25:17.995000000 -0500
+++ sensor_new/main.c	2017-06-27 12:32:26.525092100 -0500
@@ -117,6 +117,10 @@
 #include "board_palna.h"
 #endif
 
+#ifdef GPS_SENSOR
+#include "gps_sensor.h"
+#endif
+
 /******************************************************************************
  Constants
  *****************************************************************************/
@@ -164,7 +168,7 @@
 mac_Config_t Main_user1Cfg = { 0 };
 #endif
 
-#if defined(USE_UART_PRINTF)
+#if defined(USE_UART_PRINTF) && !defined(GPS_SENSOR)
 UART_Params uartParams;
 #endif
 
@@ -394,7 +398,7 @@
     SPI_init();
 #endif
 
-#if defined(USE_UART_PRINTF)
+#if defined(USE_UART_PRINTF) && !defined(GPS_SENSOR)
     /* Enable System_printf(..) UART output */
     UART_init();
     UART_Params_init(&uartParams);
@@ -409,6 +413,10 @@
     taskParams.priority = 1;
     Task_construct(&myTask, taskFxn, &taskParams, NULL);
 
+#ifdef GPS_SENSOR
+    gpsTaskInit();
+#endif
+
 #ifdef DEBUG_SW_TRACE
     IOCPortConfigureSet(IOID_8, IOC_PORT_RFC_TRC, IOC_STD_OUTPUT
                     | IOC_CURRENT_4MA | IOC_SLEW_ENABLE);
diff -urN sensor.c sensor_new/sensor.c
--- sensor.c	2017-09-11 10:25:18.007000000 -0500
+++ sensor_new/sensor.c	2017-06-27 12:32:26.535092300 -0500
@@ -57,6 +57,12 @@
 #include "sensor.h"
 #include "config.h"
 #include "board_led.h"
+#include <driverlib/gpio.h>
+
+#ifdef GPS_SENSOR
+#include "gps_sensor.h"
+#endif
+#include "board_lcd.h"
 
 /******************************************************************************
  Constants and definitions
@@ -93,7 +99,7 @@
 #define MAX_REPORTING_INTERVAL 360000
 
 /* Polling Interval Min and Max (in milliseconds) */
-#define MIN_POLLING_INTERVAL 1000
+#define MIN_POLLING_INTERVAL 100
 #define MAX_POLLING_INTERVAL 10000
 
 /* Inter packet interval in certification test mode */
@@ -137,7 +143,7 @@
 /*! Device's Outgoing MSDU Handle values */
 STATIC uint8_t deviceTxMsduHandle = 0;
 
-STATIC Smsgs_configReqMsg_t configSettings;
+Smsgs_configReqMsg_t configSettings;
 
 /*!
  Temp Sensor field - valid only if Smsgs_dataFields_tempSensor
@@ -160,6 +166,16 @@
 STATIC Smsgs_humiditySensorField_t humiditySensor =
     { 0 };
 
+/*!
+ GPS Sensor field - valid only if Smsgs_dataFields_gpsSensor
+ is set in frameControl.
+ */
+Smsgs_gpsSensorField_t gpsSensor =
+    { 0 };
+
+Smsgs_gpsSensorField_t gpsSensorTest =
+    { 0 };
+
 STATIC Llc_netInfo_t parentInfo = {0};
 
 /******************************************************************************
@@ -271,6 +287,9 @@
 #if defined(HUMIDITY_SENSOR)
     configSettings.frameControl |= Smsgs_dataFields_humiditySensor;
 #endif
+#if defined(GPS_SENSOR)
+    configSettings.frameControl |= Smsgs_dataFields_gpsSensor;
+#endif
     configSettings.frameControl |= Smsgs_dataFields_msgStats;
     configSettings.frameControl |= Smsgs_dataFields_configSettings;
     if(!CERTIFICATION_TEST_MODE)
@@ -392,8 +411,21 @@
 
         /* Clear the event */
         Util_clearEvent(&Sensor_events, SENSOR_START_EVT);
+
+//        gpsReportStart();
     }
 
+#ifdef GPS_SENSOR
+    /* Send motion sensor data if value has changed */
+    if(Sensor_events & SENSOR_GPS_EVT)
+    {
+        processSensorMsgEvt();
+
+        /* Clear the event */
+        Util_clearEvent(&Sensor_events, SENSOR_GPS_EVT);
+    }
+#endif
+
     /* Is it time to send the next sensor data message? */
     if(Sensor_events & SENSOR_READING_TIMEOUT_EVT)
     {
@@ -404,10 +436,15 @@
             Ssf_setReadingClock(configSettings.reportingInterval);
         }
 
-
 #if SENSOR_TEST_RAMP_DATA_SIZE
         processSensorRampMsgEvt();
 #else
+
+#if defined(GPS_SENSOR)
+
+        gpsReport();
+
+#else
         /* Read sensors */
         readSensors();
 
@@ -415,6 +452,8 @@
         processSensorMsgEvt();
 #endif
 
+#endif
+
         /* Clear the event */
         Util_clearEvent(&Sensor_events, SENSOR_READING_TIMEOUT_EVT);
     }
@@ -788,6 +827,13 @@
         memcpy(&sensor.humiditySensor, &humiditySensor,
                sizeof(Smsgs_humiditySensorField_t));
     }
+#ifdef GPS_SENSOR
+    if(sensor.frameControl & Smsgs_dataFields_gpsSensor)
+    {
+        memcpy(&sensor.gpsSensor, &gpsSensor,
+               sizeof(Smsgs_gpsSensorField_t));
+    }
+#endif
     if(sensor.frameControl & Smsgs_dataFields_msgStats)
     {
         memcpy(&sensor.msgStats, &Sensor_msgStats,
@@ -834,6 +880,12 @@
     {
         len += SMSGS_SENSOR_HUMIDITY_LEN;
     }
+#ifdef GPS_SENSOR
+    if(pMsg->frameControl & Smsgs_dataFields_gpsSensor)
+    {
+        len += SMSGS_SENSOR_GPS_LEN;
+    }
+#endif
     if(pMsg->frameControl & Smsgs_dataFields_msgStats)
     {
         len += SMSGS_SENSOR_MSG_STATS_LEN;
@@ -869,6 +921,24 @@
             pBuf = Util_bufferUint16(pBuf, pMsg->humiditySensor.temp);
             pBuf = Util_bufferUint16(pBuf, pMsg->humiditySensor.humidity);
         }
+#ifdef GPS_SENSOR
+        if(pMsg->frameControl & Smsgs_dataFields_gpsSensor)
+        {
+            pBuf = Util_bufferUint16(pBuf, pMsg->gpsSensor.lat.DM);
+            *pBuf++ = Util_breakUint32(pMsg->gpsSensor.lat.m, 0);
+            *pBuf++ = Util_breakUint32(pMsg->gpsSensor.lat.m, 1);
+            *pBuf++ = Util_breakUint32(pMsg->gpsSensor.lat.m, 2);
+            pBuf = Util_bufferUint16(pBuf, pMsg->gpsSensor.lng.DM);
+            *pBuf++ = Util_breakUint32(pMsg->gpsSensor.lng.m, 0);
+            *pBuf++ = Util_breakUint32(pMsg->gpsSensor.lng.m, 1);
+            *pBuf++ = Util_breakUint32(pMsg->gpsSensor.lng.m, 2);
+            pBuf = Util_bufferUint16(pBuf, pMsg->gpsSensor.alt.A);
+            *pBuf++ = pMsg->gpsSensor.alt.a;
+            *pBuf++ = pMsg->gpsSensor.time.h;
+            *pBuf++ = pMsg->gpsSensor.time.m;
+            *pBuf++ = pMsg->gpsSensor.time.s;
+        }
+#endif
         if(pMsg->frameControl & Smsgs_dataFields_msgStats)
         {
             pBuf = Util_bufferUint16(pBuf, pMsg->msgStats.joinAttempts);
@@ -1060,6 +1130,12 @@
         newFrameControl |= Smsgs_dataFields_humiditySensor;
     }
 #endif
+#if defined(GPS_SENSOR)
+    if(frameControl & Smsgs_dataFields_gpsSensor)
+    {
+        newFrameControl |= Smsgs_dataFields_gpsSensor;
+    }
+#endif
     if(frameControl & Smsgs_dataFields_msgStats)
     {
         newFrameControl |= Smsgs_dataFields_msgStats;
diff -urN sensor.h sensor_new/sensor.h
--- sensor.h	2017-09-11 10:25:18.017000000 -0500
+++ sensor_new/sensor.h	2017-06-27 12:32:26.545092500 -0500
@@ -65,6 +65,8 @@
 #define SENSOR_START_EVT 0x0001
 /*! Event ID - Reading Timeout Event */
 #define SENSOR_READING_TIMEOUT_EVT 0x0002
+/*! Event ID - GPS Sensor Event */
+#define SENSOR_GPS_EVT 0x0004
 
 /*! Sensor Status Values */
 typedef enum
diff -urN smsgs.h sensor_new/smsgs.h
--- smsgs.h	2017-09-11 10:25:18.038000000 -0500
+++ sensor_new/smsgs.h	2017-06-27 12:32:26.566093000 -0500
@@ -188,6 +188,8 @@
 #define SMSGS_SENSOR_LIGHT_LEN 2
 /*! Length of the humiditySensor portion of the sensor data message */
 #define SMSGS_SENSOR_HUMIDITY_LEN 4
+/*! Length of the gpsSensor portion of the sensor data message */
+#define SMSGS_SENSOR_GPS_LEN 16
 /*! Length of the messageStatistics portion of the sensor data message */
 #define SMSGS_SENSOR_MSG_STATS_LEN 36
 /*! Length of the configSettings portion of the sensor data message */
@@ -239,6 +241,8 @@
     Smsgs_dataFields_msgStats = 0x0008,
     /*! Config Settings */
     Smsgs_dataFields_configSettings = 0x0010,
+    /*! GPS Sensor */
+    Smsgs_dataFields_gpsSensor = 0x0020,
 } Smsgs_dataFields_t;
 
 /*!
@@ -373,6 +377,41 @@
 } Smsgs_humiditySensorField_t;
 
 /*!
+ GPS Sensor Field
+ */
+typedef struct _Smsgs_gpssensorfield_t
+{
+    /*! Latitude coordinate from GPS module (Degrees Minutes Format - DM.m) */
+    struct glat_s
+    {
+        int16_t DM;
+        uint32_t m;
+    } lat;
+
+    /*! Longitude coordinate from GPS module (Degrees Minutes Format - DM.m) */
+    struct glng_s
+    {
+        int16_t DM;
+        uint32_t m;
+    } lng;
+
+    /*! Altitude from GPS module (A.a meters) */
+    struct galt_s
+    {
+        uint16_t A;
+        uint8_t a;
+    } alt;
+
+    /*! Time of GPS fix in UTC */
+    struct time_s
+    {
+        uint8_t h;
+        uint8_t m;
+        uint8_t s;
+    } time;
+} Smsgs_gpsSensorField_t;
+
+/*!
  Message Statistics Field
  */
 typedef struct _Smsgs_msgstatsfield_t
@@ -472,6 +511,11 @@
      */
     Smsgs_humiditySensorField_t humiditySensor;
     /*!
+     GPS Sensor field - valid only if Smsgs_dataFields_gpsSensor
+     is set in frameControl.
+     */
+    Smsgs_gpsSensorField_t gpsSensor;
+    /*!
      Message Statistics field - valid only if Smsgs_dataFields_msgStats
      is set in frameControl.
      */
